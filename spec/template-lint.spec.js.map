{"version":3,"sources":["template-lint.spec.ts"],"names":[],"mappings":"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","file":"template-lint.spec.js","sourcesContent":["/// <reference path=\"template-lint.ts\" />\r\nimport {\r\n  Linter,\r\n  SelfCloseRule,\r\n  ParserRule} from '../dist/template-lint';\r\n\r\ndescribe(\"SelfClose Rule\", () => {\r\n\r\n  var linter: Linter = new Linter([\r\n    new SelfCloseRule()\r\n  ]);\r\n  \r\n   it(\"will allow self-close within svg scope\", (done) => {\r\n    linter.lint('<template><svg><rect/></svg></template>')\r\n      .then((errors) => {\r\n        expect(errors.length).toBe(0);\r\n        done();\r\n      });\r\n  });\r\n  \r\n  it(\"will reject self-close on svg\", (done) => {\r\n    linter.lint('<template><svg/></template>')\r\n      .then((errors) => {\r\n        expect(errors.length).toBeGreaterThan(0);\r\n        done();\r\n      });\r\n  });\r\n\r\n  it(\"will reject self-closed template\", (done) => {\r\n    linter.lint('<template/>')\r\n      .then((errors) => {\r\n        expect(errors.length).toBeGreaterThan(0);\r\n        done();\r\n      });\r\n  });\r\n\r\n  it(\"will reject self-closed non-void\", (done) => {\r\n    linter.lint('<template><div/></template>')\r\n      .then((errors) => {\r\n        expect(errors.length).toBeGreaterThan(0);\r\n        done();\r\n      });\r\n  });\r\n\r\n  it(\"will reject self-closed custom-element\", (done) => {\r\n    linter.lint('<template><custom-element/></template>')\r\n      .then((errors) => {\r\n        expect(errors.length).toBeGreaterThan(0);\r\n        done();\r\n      });\r\n  });\r\n\r\n  it(\"will allow self-closed void elements\", (done) => {\r\n\r\n    linter.lint('<template><br/></template>')\r\n      .then((errors) => {\r\n        expect(errors.length).toBe(0);\r\n        done();\r\n      });\r\n  });\r\n});\r\n\r\n\r\n\r\n\r\ndescribe(\"Parser Rule\", () => {\r\n\r\n  var linter: Linter = new Linter([\r\n    new ParserRule(),\r\n  ]);\r\n\r\n  it(\"will reject unclosed element\", (done) => {\r\n    linter.lint('<template>')\r\n      .then((errors) => {\r\n        expect(errors.length).toBeGreaterThan(0);\r\n        done();\r\n      });\r\n  });\r\n\r\n  it(\"will reject nested unclosed element\", (done) => {\r\n    linter.lint('<template><div></template>')\r\n      .then((errors) => {\r\n        expect(errors.length).toBeGreaterThan(0);\r\n        done();\r\n      });\r\n  });\r\n\r\n  it(\"will reject nested misnamed closing element\", (done) => {\r\n    linter.lint('<template><div></dvi></template>')\r\n      .then((errors) => {\r\n        expect(errors.length).toBeGreaterThan(0);\r\n        done();\r\n      });\r\n  });\r\n\r\n  it(\"will reject multiple nested closing element (multiple)\", (done) => {\r\n    linter.lint('<template><div><div><div></div></div></template>')\r\n      .then((errors) => {\r\n        expect(errors.length).toBeGreaterThan(0);\r\n        done();\r\n      });\r\n  });\r\n});"],"sourceRoot":"../source"}