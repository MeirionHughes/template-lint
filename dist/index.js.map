{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["\"use strict\";\r\n\r\nimport {SAXParser, StartTagLocationInfo} from 'parse5';\r\nimport * as parse5 from 'parse5';\r\nimport {Readable} from 'stream';\r\n\r\n/**\r\n* Abstract Lint Rule \r\n*/\r\nexport abstract class Rule {\r\n    private errors: Error[];\r\n    \r\n    constructor()\r\n    {\r\n        this.errors = [];\r\n    }\r\n        \r\n    protected reportError(error: Error) {\r\n        if (error){\r\n            this.errors.push(error);\r\n        }\r\n    }\r\n    \r\n    init(parser: SAXParser, parseState: ParseState) {\r\n    }\r\n\r\n    finalise(): Error[] {\r\n        let errors = this.errors;\r\n        this.errors = [];\r\n        return errors;        \r\n    }\r\n}\r\n\r\n/**\r\n* An error object\r\n*/\r\nexport class Error {\r\n    constructor(public message: string, public line: number, public column: number) {\r\n    }\r\n}\r\n\r\n/**\r\n * Rule to ensure non-void elements do not self-close\r\n */\r\nexport class SelfCloseRule extends Rule {\r\n    init(parser: SAXParser, parseState: ParseState) {\r\n        super.init(parser, parseState);\r\n\r\n        const voidTags = [\r\n            'area', 'base', 'br', 'col', 'embed', 'hr',\r\n            'img', 'input', 'keygen', 'link', 'meta',\r\n            'param', 'source', 'track', 'wbr'];\r\n\r\n        var self = this;\r\n\r\n        parser.on('startTag', (name, attrs, selfClosing, location) => {\r\n\r\n            if (parseState.scope == 'svg') {\r\n                return;\r\n            }\r\n\r\n            if (selfClosing && voidTags.indexOf(name) < 0) {\r\n                self.reportError(new Error(\"self-closing element\", location.line, location.col))\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Rule to ensure tags are properly closed. \r\n */\r\nexport class ParserRule extends Rule {\r\n    private parseState: ParseState;\r\n\r\n    init(parser: SAXParser, parseState: ParseState) {\r\n        super.init(parser, parseState);\r\n        this.parseState = parseState;\r\n    }\r\n\r\n    finalise(): Error[] {\r\n        return this.parseState.errors;\r\n    }\r\n}\r\n\r\n/**\r\n *  Node in traversal stack\r\n */\r\nexport class ParseNode {\r\n    constructor(public scope: string, public name: string, public location: StartTagLocationInfo) {\r\n    }\r\n}\r\n\r\n/**\r\n *  Helper to maintain the current state of open tags  \r\n */\r\nexport class ParseState {\r\n    private scopes: string[];\r\n    private voids: string[];\r\n\r\n    public stack: ParseNode[];\r\n    public errors: Error[];\r\n\r\n    public scope: string;\r\n    public nextScope: string;\r\n\r\n    constructor(scopes?: string[], voids?: string[]) {\r\n        if (scopes == null)\r\n            scopes = ['html', 'body', 'template', 'svg'];\r\n\r\n        if (voids == null)\r\n            voids = ['area', 'base', 'br', 'col', 'embed', 'hr',\r\n                'img', 'input', 'keygen', 'link', 'meta',\r\n                'param', 'source', 'track', 'wbr'];\r\n\r\n        this.scopes = scopes;\r\n        this.voids = voids;\r\n    }\r\n\r\n    initPreRules(parser: SAXParser) {\r\n        this.stack = [];\r\n        this.errors = [];\r\n\r\n        var self = this;\r\n        var stack = this.stack;\r\n\r\n        parser.on(\"startTag\", (name, attrs, selfClosing, location) => {\r\n            self.nextScope = null;\r\n            if (!selfClosing && !self.isVoid(name)) {\r\n\r\n                let currentScope = self.scope;\r\n                let nextScope = \"\"\r\n\r\n                if (stack.length > 0)\r\n                    nextScope = stack[stack.length - 1].scope;\r\n\r\n                if (self.isScope(name))\r\n                    nextScope = name;\r\n\r\n                self.nextScope = nextScope;\r\n\r\n                stack.push(new ParseNode(currentScope, name, location));\r\n            }\r\n        });\r\n\r\n        parser.on(\"endTag\", (name, location) => {\r\n\r\n            if (stack.length <= 0 || stack[stack.length - 1].name != name) {\r\n                let error = new Error(\"mismatched close tag\", location.line, location.col);\r\n                self.errors.push(error);\r\n            }\r\n            else {\r\n                stack.pop();\r\n                if (stack.length > 0) {\r\n                    self.scope = stack[stack.length - 1].scope;\r\n                }\r\n                else {\r\n                    self.scope = \"\";\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    initPostRules(parser: SAXParser) {\r\n        var self = this;\r\n\r\n        parser.on(\"startTag\", () => {\r\n            if (self.nextScope !== null)\r\n                self.scope = self.nextScope;\r\n            self.nextScope = null;\r\n        });\r\n    }\r\n\r\n    finalise() {\r\n        let stack = this.stack;\r\n        let errors = this.errors;\r\n        if (stack.length > 0) {\r\n            let element = stack[stack.length - 1]\r\n            let error = new Error(\"suspected unclosed element detected\",\r\n                element.location.line, \r\n                element.location.col);\r\n            errors.push(error);\r\n        }\r\n    }\r\n\r\n    private isVoid(name: string): boolean {\r\n        return this.voids.indexOf(name) >= 0;\r\n    }\r\n\r\n    private isScope(name: string): boolean {\r\n        return this.scopes.indexOf(name) >= 0;\r\n    }\r\n}\r\n\r\nexport class Linter {\r\n\r\n    private rules: Array<Rule>;\r\n\r\n    constructor(rules?: Rule[]) {\r\n        if (!rules)\r\n            rules = [\r\n                new ParserRule(),\r\n                new SelfCloseRule(),\r\n            ];\r\n        this.rules = rules;\r\n    }\r\n\r\n    lint(html: string): Promise<string[]> {\r\n        \r\n        var parser: SAXParser = new SAXParser({ locationInfo: true });\r\n        var parseState: ParseState = new ParseState();\r\n        var stream: Readable = new Readable();\r\n\r\n        parseState.initPreRules(parser);\r\n\r\n        let rules = this.rules;\r\n\r\n        rules.forEach((rule) => {\r\n            rule.init(parser, parseState);\r\n        });\r\n\r\n        parseState.initPostRules(parser);\r\n\r\n\r\n        stream.push(html);\r\n        stream.push(null);\r\n        var work = stream.pipe(parser);\r\n\r\n        var completed = new Promise<void>(function (resolve, reject) {\r\n            work.on(\"end\", () => {\r\n                parseState.finalise();\r\n                resolve();\r\n            });\r\n        });\r\n\r\n        var ruleTasks = [];\r\n\r\n        rules.forEach((rule) => {\r\n            let task = completed.then(() => {\r\n                return rule.finalise();\r\n            });\r\n            ruleTasks.push(task);\r\n        });\r\n\r\n        return Promise.all(ruleTasks).then(results => {\r\n\r\n            var all = [];\r\n\r\n            results.forEach(parts => {\r\n                all = all.concat(parts);\r\n            });\r\n\r\n            return all;\r\n        });\r\n    }\r\n}"],"sourceRoot":"../source"}