{"version":3,"sources":["parse-state.ts"],"names":[],"mappings":";AAEA,6BAAwB,cAAc,CAAC,CAAA;AACvC,wBAAmC,SAAS,CAAC,CAAA;AAE7C;;GAEG;AACH;IAWI,YAAY,MAAiB,EAAE,KAAgB;QAC3C,EAAE,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC;YACf,MAAM,GAAG,CAAC,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;QAEzD,EAAE,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC;YACd,KAAK,GAAG,CAAC,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI;gBAC/C,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM;gBACxC,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;QAE3C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACvB,CAAC;IAED,YAAY,CAAC,MAAiB;QAC1B,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAChB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QAEjB,IAAI,IAAI,GAAG,IAAI,CAAC;QAChB,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QAEvB,MAAM,CAAC,EAAE,CAAC,UAAU,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,WAAW,EAAE,QAAQ;YACrD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,EAAE,CAAC,CAAC,CAAC,WAAW,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAErC,IAAI,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC;gBAC9B,IAAI,SAAS,GAAG,EAAE,CAAA;gBAElB,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;oBACjB,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC;gBAE9C,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBACnB,SAAS,GAAG,IAAI,CAAC;gBAErB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;gBAC3B,IAAI,CAAC,SAAS,GAAG,IAAI,sBAAS,CAAC,YAAY,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;YACxE,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE,QAAQ;YAE/B,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC;gBAC5D,IAAI,KAAK,GAAG,IAAI,aAAK,CAAC;oBAClB,OAAO,EAAE,sBAAsB;oBAC/B,IAAI,EAAE,QAAQ,CAAC,IAAI;oBACnB,MAAM,EAAE,QAAQ,CAAC,GAAG;oBACpB,QAAQ,EAAE,qBAAa,CAAC,KAAK;iBAChC,CAAC,CAAC;gBACH,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC5B,CAAC;YACD,IAAI,CAAC,CAAC;gBACF,KAAK,CAAC,GAAG,EAAE,CAAC;gBACZ,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;oBACnB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC;gBAC/C,CAAC;gBACD,IAAI,CAAC,CAAC;oBACF,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;gBACpB,CAAC;YACL,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAED,aAAa,CAAC,MAAiB;QAC3B,IAAI,IAAI,GAAG,IAAI,CAAC;QAEhB,MAAM,CAAC,EAAE,CAAC,UAAU,EAAE;YAClB,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,IAAI,CAAC;gBACxB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC;YAChC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YAEtB,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC;gBACvB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;YACnC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QAC1B,CAAC,CAAC,CAAC;IACP,CAAC;IAED,QAAQ;QACJ,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QAEvB,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YACnB,IAAI,OAAO,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA;YACrC,IAAI,KAAK,GAAG,IAAI,aAAK,CAAC;gBAClB,OAAO,EAAE,qCAAqC;gBAC9C,QAAQ,EAAE,qBAAa,CAAC,KAAK;gBAC7B,IAAI,EAAE,OAAO,CAAC,QAAQ,CAAC,IAAI;gBAC3B,MAAM,EAAE,OAAO,CAAC,QAAQ,CAAC,GAAG;aAC/B,CAAC,CAAC;YACH,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC5B,CAAC;IACL,CAAC;IAEM,MAAM,CAAC,IAAY;QACtB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACzC,CAAC;IAEM,OAAO,CAAC,IAAY;QACvB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC1C,CAAC;AACL,CAAC;AA7GY,kBAAU,aA6GtB,CAAA","file":"parse-state.js","sourcesContent":["import {SAXParser, StartTagLocationInfo} from 'parse5';\r\nimport * as parse5 from 'parse5';\r\nimport {ParseNode} from './parse-node';\r\nimport {Issue, IssueSeverity} from './issue';\r\n\r\n/**\r\n *  Helper to maintain the current state of open tags  \r\n */\r\nexport class ParseState {\r\n    private scopes: string[];\r\n    private voids: string[];\r\n\r\n    public stack: ParseNode[];\r\n    public issues: Issue[];\r\n\r\n    public scope: string;\r\n    public nextScope: string;\r\n    public nextStack: ParseNode;\r\n\r\n    constructor(scopes?: string[], voids?: string[]) {\r\n        if (scopes == null)\r\n            scopes = ['html', 'body', 'template', 'svg', 'math'];\r\n\r\n        if (voids == null)\r\n            voids = ['area', 'base', 'br', 'col', 'embed', 'hr',\r\n                'img', 'input', 'keygen', 'link', 'meta',\r\n                'param', 'source', 'track', 'wbr'];\r\n\r\n        this.scopes = scopes;\r\n        this.voids = voids;\r\n    }\r\n\r\n    initPreRules(parser: SAXParser) {\r\n        this.stack = [];\r\n        this.issues = [];\r\n\r\n        var self = this;\r\n        var stack = this.stack;\r\n\r\n        parser.on(\"startTag\", (name, attrs, selfClosing, location) => {\r\n            self.nextScope = null;\r\n            self.nextStack = null;\r\n            if (!selfClosing && !self.isVoid(name)) {\r\n\r\n                let currentScope = self.scope;\r\n                let nextScope = \"\"\r\n\r\n                if (stack.length > 0)\r\n                    nextScope = stack[stack.length - 1].scope;\r\n\r\n                if (self.isScope(name))\r\n                    nextScope = name;\r\n\r\n                self.nextScope = nextScope;\r\n                self.nextStack = new ParseNode(currentScope, name, attrs, location);\r\n            }\r\n        });\r\n\r\n        parser.on(\"endTag\", (name, location) => {\r\n\r\n            if (stack.length <= 0 || stack[stack.length - 1].name != name) {\r\n                let issue = new Issue({\r\n                    message: \"mismatched close tag\",\r\n                    line: location.line,\r\n                    column: location.col,\r\n                    severity: IssueSeverity.Error\r\n                });\r\n                self.issues.push(issue);\r\n            }\r\n            else {\r\n                stack.pop();\r\n                if (stack.length > 0) {\r\n                    self.scope = stack[stack.length - 1].scope;\r\n                }\r\n                else {\r\n                    self.scope = \"\";\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    initPostRules(parser: SAXParser) {\r\n        var self = this;\r\n\r\n        parser.on(\"startTag\", () => {\r\n            if (self.nextScope !== null)\r\n                self.scope = self.nextScope;\r\n            self.nextScope = null;\r\n\r\n            if (self.nextStack != null)\r\n                self.stack.push(self.nextStack)\r\n            self.nextStack = null;\r\n        });\r\n    }\r\n\r\n    finalise() {\r\n        let stack = this.stack;\r\n\r\n        if (stack.length > 0) {\r\n            let element = stack[stack.length - 1]\r\n            let issue = new Issue({\r\n                message: \"suspected unclosed element detected\",\r\n                severity: IssueSeverity.Error,\r\n                line: element.location.line,\r\n                column: element.location.col,\r\n            });\r\n            this.issues.push(issue);\r\n        }\r\n    }\r\n\r\n    public isVoid(name: string): boolean {\r\n        return this.voids.indexOf(name) >= 0;\r\n    }\r\n\r\n    public isScope(name: string): boolean {\r\n        return this.scopes.indexOf(name) >= 0;\r\n    }\r\n}"],"sourceRoot":"../source"}