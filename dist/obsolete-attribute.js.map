{"version":3,"sources":["obsolete-attribute.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AAGb,uBAAmB,QAAQ,CAAC,CAAA;AAE5B,6BAAwB,cAAc,CAAC,CAAA;AAEvC;;GAEG;AACH,oCAA2C,WAAI;IAK3C,YAAY,QAA+C;QACvD,OAAO,CAAC;QAER,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QAEnB,QAAQ,CAAC,OAAO,CAAC,CAAC;YACd,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,SAAS,CAAC,CAAC,CAAC;gBACzB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;oBACf,IAAI,EAAE,CAAC,CAAC,IAAI;oBACZ,GAAG,EAAE,CAAC,CAAC,GAAG,IAAI,EAAE;iBACnB,CAAC,CAAC;YACP,CAAC;QACL,CAAC,CAAC,CAAA;IACN,CAAC;IAED,IAAI,CAAC,MAAiB,EAAE,UAAsB;QAC1C,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;QAE/B,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAE7B,MAAM,CAAC,EAAE,CAAC,UAAU,EAAE,CAAC,GAAG,EAAE,KAAK,EAAE,WAAW,EAAE,GAAG;YAE/C,KAAK,CAAC,OAAO,CAAC,IAAI;gBAEd,IAAI,aAAa,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;gBAEnE,EAAE,CAAC,CAAC,aAAa,IAAI,CAAC,CAAC,CAAC,CAAC;oBACrB,IAAI,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,CAAC;oBAEpC,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,IAAI,IAAI,IAAI,KAAK,CAAC,GAAG,IAAI,EAAE,IAAI,KAAK,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC;wBAC3D,IAAI,GAAG,GAAG,GAAG,KAAK,CAAC,IAAI,wBAAwB,CAAC;wBAChD,IAAI,KAAK,GAAG,IAAI,sBAAS,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;wBAClD,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;oBAC5B,CAAC;gBACL,CAAC;YACL,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;AACL,CAAC;AA3CY,6BAAqB,wBA2CjC,CAAA","file":"obsolete-attribute.js","sourcesContent":["\"use strict\";\r\n\r\nimport {SAXParser} from 'parse5';\r\nimport {Rule} from './rule';\r\nimport {ParseState} from './parse-state';\r\nimport {RuleError} from './rule-error';\r\n\r\n/**\r\n * Rule to ensure tags are properly closed. \r\n */\r\nexport class ObsoleteAttributeRule extends Rule {\r\n    private parseState: ParseState;\r\n\r\n    private obsolete: Array<{ tag: string, name: string }>\r\n\r\n    constructor(obsolete?: Array<{ tag: string, name: string }>) {\r\n        super();\r\n        \r\n        this.obsolete = [];\r\n\r\n        obsolete.forEach(x => {\r\n            if (x['name'] != undefined) {\r\n                this.obsolete.push({\r\n                    name: x.name,\r\n                    tag: x.tag || \"\"\r\n                });\r\n            }\r\n        })\r\n    }\r\n\r\n    init(parser: SAXParser, parseState: ParseState) {\r\n        super.init(parser, parseState);\r\n\r\n        var obsolete = this.obsolete;\r\n\r\n        parser.on(\"startTag\", (tag, attrs, selfClosing, loc) => {\r\n\r\n            attrs.forEach(attr => {\r\n\r\n                var obsoleteIndex = obsolete.findIndex((x) => x.name == attr.name);\r\n\r\n                if (obsoleteIndex >= 0) {\r\n                    var entry = obsolete[obsoleteIndex];\r\n\r\n                    if (entry.tag == null || entry.tag == \"\" || entry.tag == tag) {\r\n                        let str = `${entry.name} attribute is obsolete`;\r\n                        let error = new RuleError(str, loc.line, loc.col);\r\n                        this.reportError(error);\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n}"],"sourceRoot":"../source"}