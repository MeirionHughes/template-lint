{"version":3,"sources":["obsolete-attribute.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AAGb,uBAAmB,QAAQ,CAAC,CAAA;AAE5B,6BAAwB,cAAc,CAAC,CAAA;AAEvC;;GAEG;AACH,oCAA2C,WAAI;IAK3C,YAAY,QAA4D;QACpE,OAAO,CAAC;QAER,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC9B,CAAC;IAED,IAAI,CAAC,MAAiB,EAAE,UAAsB;QAC1C,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;QAE/B,MAAM,CAAC,EAAE,CAAC,UAAU,EAAE,CAAC,GAAG,EAAE,KAAK,EAAE,WAAW,EAAE,GAAG;YAC/C,KAAK,CAAC,OAAO,CAAC,IAAI;gBAEd,IAAI,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;gBAEzE,EAAE,CAAC,CAAC,aAAa,IAAI,CAAC,CAAC,CAAC,CAAC;oBACrB,IAAI,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;oBAE1C,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,IAAI,IAAI,IAAI,KAAK,CAAC,GAAG,IAAI,EAAE,IAAI,KAAK,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC;wBAC3D,IAAI,GAAG,GAAG,GAAG,KAAK,CAAC,IAAI,wBAAwB,CAAC;wBAChD,IAAI,KAAK,GAAG,IAAI,sBAAS,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC;wBAC7D,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;oBAC5B,CAAC;gBACL,CAAC;YACL,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;AACL,CAAC;AA/BY,6BAAqB,wBA+BjC,CAAA","file":"obsolete-attribute.js","sourcesContent":["\"use strict\";\r\n\r\nimport {SAXParser} from 'parse5';\r\nimport {Rule} from './rule';\r\nimport {ParseState} from './parse-state';\r\nimport {RuleError} from './rule-error';\r\n\r\n/**\r\n * Rule to ensure tags are properly closed. \r\n */\r\nexport class ObsoleteAttributeRule extends Rule {\r\n    private parseState: ParseState;\r\n\r\n    private obsoletes: Array<{attr: string, tag?: string, msg?:string }>\r\n\r\n    constructor(obsolete?: Array<{attr: string, tag?: string, msg?:string }>) {\r\n        super();\r\n        \r\n        this.obsoletes = obsolete;\r\n    }\r\n\r\n    init(parser: SAXParser, parseState: ParseState) {\r\n        super.init(parser, parseState);\r\n\r\n        parser.on(\"startTag\", (tag, attrs, selfClosing, loc) => {\r\n            attrs.forEach(attr => {\r\n\r\n                var obsoleteIndex = this.obsoletes.findIndex((x) => x.attr == attr.name);\r\n\r\n                if (obsoleteIndex >= 0) {\r\n                    var entry = this.obsoletes[obsoleteIndex];\r\n\r\n                    if (entry.tag == null || entry.tag == \"\" || entry.tag == tag) {\r\n                        let str = `${entry.attr} attribute is obsolete`;\r\n                        let error = new RuleError(str, loc.line, loc.col, entry.msg);\r\n                        this.reportError(error);\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n}"],"sourceRoot":"../source"}